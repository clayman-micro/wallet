version: v1beta11

# `vars` specifies variables which may be used as ${VAR_NAME} in devspace.yaml
vars:
- name: IMAGE
  value: ghcr.io/clayman-micro/wallet

# `deployments` tells DevSpace how to deploy this project
deployments:
- name: wallet
  # This deployment uses `helm` but you can also define `kubectl` deployments or kustomizations
  helm:
    # We are deploying this project with the Helm chart you provided
    chart:
      name: .devspace/chart-repo/charts/micro
    # Under `values` we can define the values for this Helm chart used during `helm install/upgrade`
    # You may also use `valuesFiles` to load values from files, e.g. valuesFiles: ["values.yaml"]
    values:
    # image: ${IMAGE} # Use the value of our `${IMAGE}` variable here (see vars above)
    # ingress:
    #   enabled: true
      image:
        repository: ghcr.io/clayman-micro/wallet
        tag: "latest"

      replicas: 1
      serviceAccount:
        name: micro

      imagePullSecrets:
        - name: ghcr

      migrations:
        enabled: false

      ingress:
        enabled: true

        rules:
          - "Host(`wallet.dev.clayman.pro`)"

      livenessProbe:
        enabled: true

      readinessProbe:
        enabled: true

# `dev` only applies when you run `devspace dev`
dev:
  # `dev.ports` specifies all ports that should be forwarded while `devspace dev` is running
  # Port-forwarding lets you access your application via localhost on your local machine
  ports:
  - imageSelector: ${IMAGE} # Select the Pod that runs our `${IMAGE}`
    forward:
    - port: 5000

  # `dev.open` tells DevSpace to open certain URLs as soon as they return HTTP status 200
  # Since we configured port-forwarding, we can use a localhost address here to access our application
  open:
  - url: http://localhost:5000

  # `dev.sync` configures a file sync between our Pods in k8s and your local project files
  sync:
  - imageSelector: ${IMAGE} # Select the Pod that runs our `${IMAGE}`
    localSubPath: ./
    containerPath: /app
    excludePaths:
    - .git/
    uploadExcludePaths:
    - .cache
    - .eggs
    - .idea
    - .mypy_cache
    - .pytest_cache
    - .scannerwork
    - .sonarlint
    - .tox
    - .vscode
    - .venv
    - '*.egg-info'
    - build
    - dist

  # `dev.terminal` tells DevSpace to open a terminal as a last step during `devspace dev`
  terminal:
    imageSelector: ${IMAGE} # Select the Pod that runs our `${IMAGE}`
    # With this optional `command` we can tell DevSpace to run a script when opening the terminal
    # This is often useful to display help info for new users or perform initial tasks (e.g. installing dependencies)
    # DevSpace has generated an example ./devspace_start.sh file in your local project - Feel free to customize it!
    workDir: /app
    command:
    - ./devspace_start.sh

  # Since our Helm charts and manifests deployments are often optimized for production,
  # DevSpace let's you swap out Pods dynamically to get a better dev environment
  replacePods:
  - imageSelector: ${IMAGE} # Select the Pod that runs our `${IMAGE}`
    # Since the `${IMAGE}` used to start our main application pod may be distroless or not have any dev tooling, let's replace it with a dev-optimized image
    # DevSpace provides a sample image here but you can use any image for your specific needs
    replaceImage: ghcr.io/clayman-micro/micro:v0.7.0
    # Besides replacing the container image, let's also apply some patches to the `spec` of our Pod
    # We are overwriting `command` + `args` for the first container in our selected Pod, so it starts with `sleep 9999999`
    # Using `sleep 9999999` as PID 1 (instead of the regular ENTRYPOINT), allows you to start the application manually
    patches:
    - op: replace
      path: spec.containers[0].command
      value:
      - sleep
    - op: replace
      path: spec.containers[0].args
      value:
      - "9999999"
    - op: remove
      path: spec.containers[0].securityContext
hooks:
- events:
  - before:deploy
  command: if [ -d '.devspace/chart-repo/.git' ]; then cd ".devspace/chart-repo" &&
    git pull origin master; else mkdir -p .devspace/chart-repo; git clone --single-branch
    --branch master https://github.com/clayman-micro/helm-chart.git .devspace/chart-repo;
    fi

# `profiles` lets you modify the config above for different environments (e.g. dev vs production)
profiles:
  # This profile is called `production` and you can use it for example using: devspace deploy -p production
  # We generally recommend to use the base config without any profiles as optimized for development (e.g. image build+push is disabled)
- name: production
# This profile adds our image to the config so that DevSpace will build, tag and push our image before the deployment
  merge:
    images:
      app:
        image: ${IMAGE} # Use the value of our `${IMAGE}` variable here (see vars above)
        dockerfile: ./Dockerfile
