version: v2beta1
name: wallet

vars:
  APP_NAME: wallet
  IMAGE: ghcr.io/clayman-micro/wallet

images:
  app:
    image: ${IMAGE}
    kaniko:
      pullSecret: ghcr

# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  # You can run this pipeline via `devspace deploy` (or `devspace run-pipeline deploy`)
  deploy:
    run: |-
      run_dependencies --all                            # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all                         # 2. Ensure pull secrets
      build_images --all -t $(git describe --always)    # 3. Build, tag (git commit hash) and push all images (see "images")
      create_deployments --all                          # 4. Deploy Helm charts and manifests specfied as "deployments"
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      run_dependencies --all       # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all    # 2. Ensure pull secrets
      create_deployments --all     # 3. Deploy Helm charts and manifests specfied as "deployments"
      start_dev app                # 4. Start dev mode "app" (see "dev" section)

      code --folder-uri vscode-remote://ssh-remote+wallet.devspace/app

# This is a list of `deployments` that DevSpace can create for this project
deployments:
  app:
    # This deployment uses `helm` but you can also define `kubectl` deployments or kustomizations
    helm:
      releaseName: ${APP_NAME}
      # We are deploying this project with the Helm chart you provided
      chart:
        git: https://github.com/clayman-micro/helm-chart.git
        branch: v2.5.0
        subPath: charts/micro
      # Under `values` we can define the values for this Helm chart used during `helm install/upgrade`
      # You may also use `valuesFiles` to load values from files, e.g. valuesFiles: ["values.yaml"]
      values:
        image:
          repository: ${IMAGE}

        replicas: 1

        serviceAccount:
          name: micro

        imagePullSecrets:
          - name: ghcr

        migrations:
          enabled: false

        ingress:
          enabled: true

          rules:
            - "Host(`wallet.dev.clayman.pro`)"

        livenessProbe:
          enabled: true

        readinessProbe:
          enabled: true

        resources:
          limits:
            cpu: 1500m
            memory: 2048Mi
          requests:
            cpu: 250m
            memory: 512Mi

# This is a list of `dev` containers that are based on the containers created by your deployments
dev:
  app:
    imageSelector: ${IMAGE}
    # Replace the container image with this dev-optimized image (allows to skip image building during development)
    devImage: python:3.11-slim
    command: ["sh", "-c", "tail -f /dev/null"]
    workingDir: /app
    # Sync files between the local filesystem and the development container
    sync:
      - path: ./:/app
        excludePaths:
          - .eggs
          - .mypy_cache
          - .pytest_cache
          - .ruff_cache
          - .scannerwork
          - .sonarlint
          - .tox
          - .venv
          - '*.egg-info'
          - build
          - dist
      - path: "${DEVSPACE_USER_HOME}/.gitconfig:/root/.gitconfig"
        file: true
        disableDownload: true
    # Open a terminal and use the following command to start it
    terminal:
      command: /app/devspace_start.sh
    # Inject a lightweight SSH server into the container (so your IDE can connect to the remote dev env)
    ssh:
      enabled: true
      localHostname: wallet.devspace
    # Make the following commands from my local machine available inside the dev container
    proxyCommands:
      - command: devspace
      - command: kubectl
      - command: helm
      - gitCredentials: true
