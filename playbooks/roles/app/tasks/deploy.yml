---

- name: Set project facts
  set_fact:
    project_root: "/home/{{ project_user }}/projects/{{ project_name }}/app"

- name: Set project dist folder
  set_fact:
    project_dist: "{{ lookup('env', 'HOME')}}/{{ project_name }}/dist"
  when: "lookup('env', 'CIRCLECI')"

- name: Prepare distribution
  local_action: shell make clean && make dist chdir="../"

- name: Get distribution version
  local_action: shell python setup.py --version chdir="../"
  register: project_version

- name: Upload new distribution
  copy: src="{{ project_dist }}/{{ project_name }}-{{ project_version.stdout }}.tar.gz" dest="{{ project_root }}/{{ project_name }}-{{ project_version.stdout }}.tar.gz" owner="{{ project_user }}" group="{{ project_user }}"
  remote_user: "{{ project_user }}"
  sudo: True

- name: Upload files
  copy: src="app.dockerfile" dest="{{ project_root }}/app.dockerfile" owner="{{ project_user }}" group="{{ project_user }}"
  remote_user: "{{ project_user }}"
  sudo: True

- name: Build app image
  shell: docker build -t {{ project_name }}:{{ project_version.stdout }} -f app.dockerfile . chdir="{{ project_root }}"
  remote_user: "{{ project_user }}"
  sudo: True

- name: Check app container exists
  shell: docker ps -a --filter="name={{ project_name }}$"
  register: output
  remote_user: "{{ project_user }}"
  sudo: True

- name: Remove existed app container
  shell: docker rm -f {{ project_name }}
  when: output.stdout.find('{{ project_name }}') != -1
  remote_user: "{{ project_user }}"
  sudo: True

- name: Create app container
  shell: docker create --name {{ project_name }} --net=backend -e DB_HOST=postgres --restart=always {{ project_name }}:{{ project_version.stdout }}
  remote_user: "{{ project_user }}"
  sudo: True

- name: Start app container
  shell: docker start {{ project_name }}
  remote_user: "{{ project_user }}"
  sudo: True

- name: Connect app container to frontend network
  shell: docker network connect frontend {{ project_name }}
  remote_user: "{{ project_user }}"
  sudo: True

- name: Make app db migrations
  shell: docker run --rm --net=backend -e DB_HOST=postgres {{ project_name }}:{{ project_version.stdout }} {{ project_name }} --config=/root/config.json db upgrade head
  remote_user: "{{ project_user }}"
  sudo: True
