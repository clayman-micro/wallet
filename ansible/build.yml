---

- hosts: locals
  vars:
    app_docker_user: "{{ lookup('env', 'DOCKER_USER') }}"
    app_docker_passpord: "{{ lookup('env', 'DOCKER_PASS') }}"
    app_docker_email: "{{ lookup('env', 'DOCKER_EMAIL') }}"

  tasks:
    - name: Configure
      set_fact:
        app_root_folder: "{{ inventory_dir }}"
        app_dist_folder: "{{ inventory_dir }}/dist"

    - name: Get current distribution version
      shell: docker run --rm -v {{ app_root_folder }}:/code {{ app_base_image }} /bin/sh -c 'cd code && python setup.py --version'
      args:
        chdir: "{{ app_root_folder }}"
      register: output

    - name: Set image name
      set_fact:
        app_version: "{{ output.stdout }}"
        app_image: "{{ app_maintainer }}/{{ app_name }}:{{ output.stdout }}"

    - name: Cleanup distribution folder
      file: state="absent" path="{{ app_dist_folder }}/"

    - name: Create distribution
      shell: docker run --rm -v {{ app_root_folder }}:/code {{ app_base_image }} /bin/sh -c 'cd code && python setup.py sdist'
      args:
        chdir: "{{ app_root_folder }}"

    - name: Create Dockerfile
      template: src=templates/Dockerfile.j2 dest="{{ app_dist_folder }}/Dockerfile"

    - name: Build app image
      docker_image:
        name: "{{ app_image }}"
        path: "{{ app_dist_folder }}"
        force: yes
        state: build

    - name: Login in Docker Hub
      docker_login:
        username: "{{ app_docker_user }}"
        password: "{{ app_docker_passpord }}"
        email: "{{ app_docker_email }}"

    - name: Push image to Docker Hub
      shell: "docker push {{ app_image }}"
