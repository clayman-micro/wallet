---

- hosts: locals
  pre_tasks:
    - name: Configure
      set_fact:
        app_root_folder: "{{ inventory_dir }}"
        app_dist_folder: "{{ inventory_dir }}/dist"

    - name: Get current distribution version
      shell: docker run --rm -v {{ app_root_folder }}:/code {{ app_base_image }} /bin/sh -c 'cd code && python setup.py --version'
      args:
        chdir: "{{ app_root_folder }}"
      register: output

    - name: Set image name
      set_fact:
        app_version: "{{ output.stdout }}"
        app_image: "{{ app_maintainer }}/{{ app_name }}:{{ output.stdout }}"

  roles:
    - role: clayman74.digitalocean-provision
      digitalocean_provision_token: "{{ lookup('env', 'DO_TOKEN') }}"
      digitalocean_provision_inventory_group: "{{ groups['cloud'] }}"
      digitalocean_provision_ssh_key: "{{ inventory_hostname }}"


- hosts: cloud

  vars:
    credentials_path: "{{ lookup('env','HOME') }}/.credentials/{{ inventory_hostname }}"

  tasks:
    - name: Collect facts
      set_fact:
        app_postgresql_password: "{{ lookup('password', '{{ credentials_path }}/{{ app_name }}/postgres_password length=20') }}"

    - name: Pull app image from registry
      docker_image:
        name: "{{ hostvars[groups['locals'][0]]['app_image'] }}"
        force: yes

    - name: Inspect postgresql container ip address
      shell: "docker inspect --format '{''{ .NetworkSettings.IPAddress }''}' {{ postgresql_container_name }}"
      register: postgresql_container_host

    - name: Upload database schema
      copy:
        src: "../wallet/storage/sql/upgrade_schema.sql"
        dest: "/opt/projects/{{ app_name }}/schema.sql"

    - name: Upgrade database schema
      shell: "docker run --rm -e PGPASSWORD=\"{{ app_postgresql_password }}\" -v /opt/projects/{{ app_name }}/schema.sql:/root/schema.sql postgres:alpine psql -h {{ postgresql_container_host.stdout }} -U {{ app_postgresql_user }} -d {{ app_postgresql_database }} -f root/schema.sql"

    - name: Start app container
      docker_container:
        name: "{{ app_name }}_{{ item }}"
        image: "{{ hostvars[groups['locals'][0]]['app_image'] }}"
        command: "{{ app_name }} --config=/root/config.yml server run --host=0.0.0.0 --port={{ app_server_port }} --consul"
        recreate: yes
        log_driver: journald
        log_options:
          tag: "{{ app_name }}"
          labels: "{{ app_name }}"
        networks:
          - name: "{{ app_network }}"
        restart_policy: "always"
        stop_signal: "SIGINT"
        volumes:
          - "/opt/projects/{{ app_name }}:/root/"
      with_sequence: count={{ app_containers_count }}
