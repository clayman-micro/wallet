[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "wallet"
version = "3.0.0a1"
description = "Personal finance service"
authors = ["Kirill Sumorokov <sumorokov.k@gmail.com>"]
license = "MIT"
packages = [
    { include = "wallet", from = "src" }
]


# Dependencies
[tool.poetry.dependencies]
python = "^3.10"
aiohttp = "^3.8.3"
click = "^8.1.3"
inflection = "^0.5.1"
jsonschema = "^4.21.1"
marshmallow = "^3.18.0"
prometheus-client = "^0.19.0"
punq = "^0.7"
structlog = "^24.0.0"
ujson = "^5.5.0"
uvloop = "^0.19.0"

[tool.poetry.group.dev.dependencies]
coverage = {extras = ["toml"], version = "^7.0.5"}
mypy = "^1.6.0"
pytest = "^7.0.0"
pytest-aiohttp = "^1.0.4"
pytest-cov = "^4.0.0"
pytest-freezer = "^0.4.8"
pytest-mock = "^3.8.2"
pytest-randomly = "^3.12.0"
pytest-xdist = "^3.0.0"
ruff = "^0.2"
types-ujson = "^5.5.0"
types-jsonschema = "^4.21.0.20240118"

[tool.poetry.group.debug.dependencies]
debugpy = "^1.6.5"
ipdb = "^0.13.9"
ipython = "^8.5.0"

# Coverage config
[tool.coverage.run]
branch = true
data_file = "tests/.coverage"
source = ["src/wallet"]
omit = [
  "*__main__*",
  "src/wallet/cli/server.py",
]

[tool.coverage.paths]
source = ["src"]

[tool.coverage.report]
show_missing = true

[tool.coverage.html]
directory = "tests/coverage"

# Mypy config
[tool.mypy]
strict = true
python_version = "3.11"

warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = "punq.*"
ignore_missing_imports = true

# Pytest settings
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--cov"
asyncio_mode = "auto"
markers = ["unit", "integration", "smoke"]
norecursedirs = ".tox"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
testpaths = ["tests"]


# Ruff config
[tool.ruff]
exclude = ['.venv']
line-length = 88
respect-gitignore = true
src = ["src", "tests"]
target-version = "py311"

[tool.ruff.lint]
ignore = [
  "D100", # Missing docstring in public module
  "D104", # Missing docstring in public package
  "D107", # Missing docstring in __init__
  "PT004",
  "SIM108"
]
select = [
  "E",    # pycodestyle errors
  "W",    # pycodestyle warnings
  "D",    # pydocstyle
  "F",    # pyflakes
  "C90",  # mccabe
  "C4",   # flake8-comprehensions
  # "B",    # flake8-bugbear
  "Q",    # flake8-quotes
  "T20",  # flake8-print
  "PT",   # flake8-pytest-style
  "RET",  # flake8-return
  "SIM",  # flake8-simplify
  "ERA",  # eradicate
]
unfixable = [
  'T201',
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = true
mark-parentheses = true

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["wallet", "tests"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
