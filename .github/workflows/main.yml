name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - 'master'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'master'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  black:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master

      - uses: actions/setup-python@v1
        with:
          python-version: '3.11'
          architecture: 'x64'

      - name: Install requirements
        run: |
          pip install poetry
          poetry install --with dev

      - name: Check with Black formatter.
        run: make check_black

  mypy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master

      - uses: actions/setup-python@v1
        with:
          python-version: '3.11'
          architecture: 'x64'

      - name: Install requirements
        run: |
          pip install poetry
          poetry install --with dev

      - name: Check with Mypy checker
        run: make check_mypy

  ruff:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master

      - uses: actions/setup-python@v1
        with:
          python-version: '3.11'
          architecture: 'x64'

      - name: Install requirements
        run: |
          pip install poetry
          poetry install --with dev

      - name: Check with Ruff linter.
        run: make check_ruff

  pytest:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - uses: actions/checkout@master

      - uses: actions/setup-python@v1
        with:
          python-version: '3.10'
          architecture: 'x64'

      - name: Install requirements
        run: |
          pip install poetry
          poetry install --with dev

      - name: Run tests
        env:
          POSTGRES_HOST: localhost
        run: make tests

  build:
    needs: [black, mypy, ruff, pytest]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Get commit short sha
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # branch event
            type=ref,event=branch
            # tag event
            type=ref,event=tag
            # master event
            type=sha,format=short,prefix=,suffix=,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}

      - name: Debug variables
        run: |
          echo "GITHUB_EVENT_NAME: ${{ github.event_name }}"
          echo "GITHUB_REF: ${{ github.ref }}"
          echo "GITHUB_REF_NAME: ${{ github.ref_name }}"
          echo "GITHUB_REPOSITORY: ${{ github.repository }}"
          echo "GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}"
          echo "GITHUB_SHA: ${{ github.sha }}"
          echo "GITHUB_SHA_SHORT: ${{ steps.vars.outputs.sha_short }}"
          echo "tags: ${{ steps.meta.outputs.tags }}"
          echo "labels: ${{ steps.meta.outputs.labels }}"

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        if: github.event_name != 'pull_request'
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Send notification to Telegram
        if: always()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT }}
          token: ${{ secrets.TELEGRAM_SECRET }}
          args: ${{ github.repository }} build version `${{ github.ref_name }}` - ${{ job.status }}
