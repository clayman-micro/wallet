name: Master

on:
  push:
    branches:
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  black:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master

      - uses: actions/setup-python@v1
        with:
          python-version: '3.11'
          architecture: 'x64'

      - name: Install requirements
        run: |
          pip install poetry
          poetry install --with dev

      - name: Check with Black formatter.
        run: make check_black

  mypy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master

      - uses: actions/setup-python@v1
        with:
          python-version: '3.11'
          architecture: 'x64'

      - name: Install requirements
        run: |
          pip install poetry
          poetry install --with dev

      - name: Check with Mypy checker
        run: make check_mypy

  ruff:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master

      - uses: actions/setup-python@v1
        with:
          python-version: '3.11'
          architecture: 'x64'

      - name: Install requirements
        run: |
          pip install poetry
          poetry install --with dev

      - name: Check with Ruff linter.
        run: make check_ruff

  pytest:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - uses: actions/checkout@master

      - uses: actions/setup-python@v1
        with:
          python-version: '3.10'
          architecture: 'x64'

      - name: Install requirements
        run: |
          pip install poetry
          poetry install --with dev

      - name: Run tests
        env:
          POSTGRES_HOST: localhost
        run: make tests

      - name: Send notification to Telegram
        if: always()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT }}
          token: ${{ secrets.TELEGRAM_SECRET }}
          args: ${{ github.repository }} tests for `master` - ${{ job.status }}

  build:
    needs: [black, mypy, ruff, pytest]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}

      - name: Debug variables
        run: |
          echo "GITHUB_EVENT_NAME: ${{ github.env.GITHUB_EVENT_NAME }}"
          echo "GITHUB_REF: ${{ github.env.GITHUB_REF }}"
          echo "GITHUB_REF_NAME: ${{ github.env.GITHUB_REF_NAME }}"
          echo "GITHUB_REPOSITORY: ${{ github.env.GITHUB_REPOSITORY }}"
          echo "GITHUB_REPOSITORY_OWNER: ${{ github.env.GITHUB_REPOSITORY_OWNER }}"
          echo "GITHUB_SHA: ${{ github.env.GITHUB_SHA }}"
          echo "tags: ${{ steps.meta.outputs.tags }}"
          echo "labels: ${{ steps.meta.outputs.labels }}"

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Send notification to Telegram
        if: always()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT }}
          token: ${{ secrets.TELEGRAM_SECRET }}
          args: ${{ github.repository }} build version `master` - ${{ job.status }}

  # deploy:
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@master

  #     - name: Deploy new version
  #       id: vault
  #       uses: clayman-micro/action-deploy@v2.0.0
  #       env:
  #         DOMAIN: wallet.staging.clayman.pro
  #         NAMESPACE: micro-staging
  #         WALLET_VERSION: latest
  #         IMAGE_PULL_POLICY: Always
  #         REPLICAS: 2
  #         SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
  #       with:
  #         params: -i ansible/inventory ansible/deploy.yml

  #     - name: Send notification to Telegram
  #       if: always()
  #       uses: appleboy/telegram-action@master
  #       with:
  #         to: ${{ secrets.TELEGRAM_CHAT }}
  #         token: ${{ secrets.TELEGRAM_SECRET }}
  #         args: ${{ github.repository }} deploy version `master` - ${{ job.status }}
